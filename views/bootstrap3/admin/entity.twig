{% extends 'admin/layout.twig' %}

{% import 'macros.twig' as gm %}
{% import 'admin/macros.twig' as m %}

{% set with_mde = true %}

{% set can_create = can(alias, 'create') %}
{% set can_edit = can(alias, 'edit_own') %}
{% set can_delete = can(alias, 'delete_own') %}
{% set can_upload = can(alias, 'upload') %}

{% set actions = can_edit or can_delete %}

{% block head_appendix %}
    {# DataTables #}
    <script charset="utf8" src="//cdn.datatables.net/1.10.15/js/jquery.dataTables.js"></script>
    <link rel="stylesheet" type="text/css" href="//cdn.datatables.net/1.10.15/css/dataTables.bootstrap.min.css">
    <script src="//cdn.datatables.net/1.10.15/js/dataTables.bootstrap.min.js"></script>
    
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.1.1/css/responsive.bootstrap.min.css">
    <script src="https://cdn.datatables.net/responsive/2.1.1/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.1.1/js/responsive.bootstrap.min.js"></script>
    
    {# croppie #}
    <link rel="stylesheet" type="text/css" href="{{ folders.global }}croppie/croppie.css" />
{% endblock %}

{% block title_appendix %}
    {% if can_create %}
        <button type="button" class="btn btn-success button-create btn-pad" ng-click="createItem()">
            {{ gm.gi('plus', 'Создать') }}
        </button>
    {% endif %}
{% endblock %}

{% block content %}
    {% include 'admin/modals/entity.twig' %}
    {% include 'admin/includes/datatables.twig' %}
{% endblock %}

{% set angular_filters %}
    app.filter('getById', function() {
        return function(input, id) {
            var i=0, len= (input != null) ? input.length : 0;
            for (; i<len; i++) {
                if (+input[i].id == +id) {
                    return input[i];
                }
            }

            return null;
        }
    });
{% endset %}

{% set more_angular %}
    {% if mde %}
        $scope.mdes = [];
        var mdEditorService = $injector.get('mdEditorService'); //not good
        var plDataService = $injector.get('plDataService');

        $scope.parse = function(text) {
            return $scope.ajax({
                method: 'post',
                url: '{{ api }}parser/parse',
                data: {
                      'text': text
                },
                noSuccessMessage: true,
                onSuccess: function(data) {
                    $scope.preview = data.text;
                    $scope.updateUI(); //angular.twig
                }
            });
        };
    {% endif %}

    var formControls = $('#entityForm').find('.form-control');
    
    $('#entityView').on('shown.bs.modal', function() {
        formControls.trigger('change');
        
        var initCroppie = function() {
            if ($scope.croppie) {
                var i = $scope.item;
                if (i && i.picture) {
                    //setTimeout(function() {
                        var obj = {
                            url: i.picture,
                        };
                        
                        if (i.points) {
                            obj['points'] = i.points;
                        }
                        
                        $scope.croppieLoading(true);
                        $('#croppie-upload').croppie('bind', obj).then(function() {
                            $scope.croppieLoading(false);

                            $scope.croppieShow();
                            $('#croppie-upload').croppie('bind');
                        });
                    //}, 2000);
                }
            }
        };
        initCroppie();
    })

    $('#entityView').on('show.bs.modal', function() {
        
        //$('#entityView').find('textarea').scrollTop(0);

        var initMdes = function() {
            {% if mde %}
                    var buttons = angular.copy(mdEditorService.defaultButtons);
                    
                    var previewButton = {
                        name: 'previewSideBySide',
                        action: function(editor) {
                            editor.options.plasticode.preview = !editor.options.plasticode.preview;
                            editor.codemirror.refresh();
                        },
                        className: 'fa fa-arrows-alt hidden-xs',
                        title: 'Превью'
                    };
                    
                    var options = {
                        toolbar: buttons
                    }
                    
                    {% include 'admin/includes/mde_buttons.twig' %}
                    
                     if ($scope.itemId == 0) {
                        options.autosave = {
                            enabled: true,
                            uniqueId: '{{ alias }}',
                            delay: 1000,
                        };
                    }
                    
                    $scope.editorOpts = options;
            {% endif %}
        };
        
        var init = function() {
            initMdes();
        };
        
        {% block modal_shown %}
            init();
        {% endblock %}
        
        $(this).focus();
    });

    {% if mde %}
        //$('#entityView').on('hidden.bs.modal', $scope.killMdes);
    {% endif %}

    {# loading dictionaries #}
    var promises = [];
    
    {% for col, value in columns if value.entity %}
        promises.push(new Promise(function(resolve, reject) {
            $http.get('{{ api }}{{ value.entity }}')
                .success(function(data) {
                    $scope.{{ value.entity }} = data;
                    resolve(data);
                });
        }));
    {% endfor %}
    
    {# croppie #}
    {% for col, value in columns if value.type == 'thumb' %}
        $scope.readFile = function(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                
                reader.onload = function(e) {
                    $scope.originalPicture = e.target.result;

                    $scope.croppieShow();
                    
                    $('#croppie-upload').croppie('bind', {
                        url: e.target.result
                    }).then(function() {
                        // ..
                    });
                }
                
                reader.readAsDataURL(input.files[0]);
            }
        };

        $scope.croppieInit = function() {
            $scope.croppie = true;
    
            $('#croppie-upload').croppie({
                viewport: {
                    width: 200,
                    height: 200
                },
            });

            $('#upload').on('change', function () {
                $scope.readFile(this);
            });
        };
        
        $scope.croppieHide = function() {
            $('.croppie-upload').removeClass('ready');
        };
        
        $scope.croppieShow = function() {
            $('.croppie-upload').addClass('ready');
        };
        
        $scope.croppieLoading = function(loading) {
            if (loading) {
                $('.croppie-upload').addClass('loading');
            }
            else {
                $('.croppie-upload').removeClass('loading');
            }

            $scope.loading = loading;

            $timeout(function() {
                $scope.$apply();
            });
        };
        
        $scope.croppieReset = function() {
            $scope.croppieHide();
            
            $('#upload').val('');

            $('#croppie-upload').croppie('bind', {
                url: ''
            });
            
            $scope.originalPicture = null;
        };
        
        $scope.croppieGetThumb = function(onComplete) {
            $('#croppie-upload').croppie('result', {
                size: 'viewport',
                format: 'jpeg'
            }).then(function(resp) {
                onComplete(resp);
            });
        };

        $scope.croppieInit();
    {% endfor %}

    $scope.initTable = function() {
        // data tables
        $scope.table = $('#{{ alias }}-table').DataTable({
            dom: "<'row'<'col-sm-12'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-6'i><'col-sm-6'l>><'row'<'col-sm-12'p>>", //'ftrilp',
            language: {
                url: '{{ folders.global }}datatables/ru.json'
            },
            {% if tables[alias].sort_index >= 0 %}
                order: [[ {{ tables[alias].sort_index }}, '{{ tables[alias].reverse ? 'desc' : 'asc' }}' ]],
            {% endif %}
            ajax: '{{ api }}{{ source ?? alias }}?format=dt',
            rowId: 'id',
            initComplete: $scope.tableInitComplete,
            columns: [
                {% block table_columns %}
                    {% for col, value in columns if value.hidden is null %}
                        {
                            {% if value.no_sort %}
                                orderable: false,
                            {% endif %}
                            data: function(row, type, val, meta) {
                                {% set type = value.display_type ?? value.type %}
                                {% if value.template %}
                                    {{ m.column_template(value.template) }}
                                {% elseif value.entity %}
                                    {{ m.column_entity(_context, col) }}
                                {% elseif type == 'bool' %}
                                    {{ m.column_bool(col) }}
                                {% elseif type == 'img' %}
                                    {{ m.column_img(col) }}
                                {% elseif type == 'date' %}
                                    {{ m.column_date(col) }}
                                {% else %}
                                    {{ m.column(col) }}
                                {% endif %}
                            }
                        },
                    {% endfor %}
                {% endblock %}

                {% if actions %}
                    {
                        orderable: false,
                        data: function(row, type, val, meta) {
                            var actions = [];
                            
                            {% if can_edit %}
                                if (row.access.edit) {
                                    actions.push('<button type="button" class="btn btn-primary btn-pad mr-1" data-id="' + row.id + '" data-action="edit">{{ gm.gi('pencil', 'Редактировать') }}</button>');
                                }
                            {% endif %}
                            {% if can_delete %}
                                if (row.access.delete) {
                                    actions.push('<button type="button" class="btn btn-danger btn-pad" data-id="' + row.id + '" data-action="delete">{{ gm.gi('remove', 'Удалить') }}</button>');
                                }
                            {% endif %}
                            
                            return actions.join(' ');
                        }
                    },
                {% endif %}
            ]
        });
        
        {% if actions %}
            $('#{{ alias }}-table tbody').on('click', 'button', function() {
                var tr = $(this).parents('tr');
                // hack for responsive view
                if (tr.hasClass('child')) {
                    tr = tr.prev();
                }
                
                var data = $scope.table.row(tr).data();

                switch (this.dataset.action) {
                    case 'edit':
                        $scope.editItem(data);
                        break;

                    case 'delete':
                        $scope.deleteItem(data);
                        break;
                        
                    {{ more_table_actions }}
                }
            });
        {% endif %}
    };
    
    $scope.setItem = function(i) {
        $scope.itemId = (i && i.id > 0) ? i.id : 0;
        $scope.item = i;
        //console.log($scope.item);
        
        $scope.itemEditLabel = ($scope.item && $scope.item.id > 0) ? 'Редактирование' : 'Создание';

        $timeout(function() {
            $scope.$apply();
        });

        if ($scope.item) {
            $scope.fillEntityForm($scope.item);
        }
        
        $scope.forms.entityForm.$setUntouched();
    };

    $scope.onChange = function() {
        {% include 'admin/includes/on_change.twig' %}
    };
    
    formControls.change($scope.onChange);

    $scope.createItem = function() {
        resetForm('entity');
        //$('#entityForm')[0].reset();
        
        var newItem = {};

        {% for col, value in columns %}
            {% set default_value = tables[value.entity].default ?? value.default %}
            {% if value.nullable %}
                $('#entityForm').find('#{{ col }}').val(null);
                newItem.{{col}} = null;
            {% elseif default_value %}
                {% if value.type == 'bool' %}
                    $('#entityForm').find('#{{ col }}').prop('checked', {{ default_value }} == 1);
                    newItem.{{col}} = {{ default_value }} == 1;
                {% else %}
                    $('#entityForm').find('#{{ col }}').val({{ default_value }});
                    newItem.{{col}} = {{ default_value }};
                {% endif %}
            {% endif %}
        {% endfor %}
        
        $scope.setItem(newItem);

        if ($scope.croppie) {
            $scope.croppieReset();
        }

        showModal('entity');
    };
    
    $scope.fillEntityForm = function(i) {
        //console.log(i);
        {% for col, value in columns %}
            {% if value.readonly is null %}
                {% if value.type == 'bool' %}
                    $('#entityForm').find('#{{ col }}').prop('checked', i.{{ col }} == 1);
                {% elseif value.type == 'date' or value.type == 'datetime-local' %}
                    var date = parseDate(i.{{ col }});
                    var dateStr = dateToString(date{% if value.type == 'datetime-local' %}, true{% endif %});

                    $('#entityForm').find('#{{ col }}').val(dateStr);
                {% else %}
                    $('#entityForm').find('#{{ col }}').val(i.{{ col }});
                {% endif %}
            {% elseif value.on_form == true %}{# для пароля, например #}
                $('#entityForm').find('#{{ col }}').val(null);
            {% endif %}
        {% endfor %}
    };
    
    $scope.editItem = function(i) {
        $scope.setItem(i);

        if ($scope.croppie) {
            $scope.croppieReset();

            if (i.picture) {
                $scope.originalPicture = -1;

                $scope.croppieLoading(true);
            }
        }

        showModal('entity');
    };
    
    $scope.refresh = function(data) {
        $scope.setItem(data);
        $scope.table.ajax.reload(null, false);
    };
    
    $scope.deleteItem = function(i) {
        if (confirm('Действительно удалить {{ name_accus }}{{ delete_extra_message|raw }}?')) {
            $scope.ajax({
                method: 'delete',
                url: '{{ api }}{{ alias }}/' + i.id,
                onSuccess: $scope.refresh,
                message: 'Запись успешно удалена.'
            });
        }
    };
    
    $scope.submitData = function(obj, persist) {
        //console.log(obj);
        var itemId = $scope.itemId;
        //delay(function() {
        $scope.ajax({
            method: ($scope.itemId == 0) ? 'post' : 'put',
            url: '{{ api }}{{ alias }}' + (($scope.itemId == 0) ? '' : '/' + $scope.itemId),
            data: obj,
            view: 'entity',
            onSuccess: $scope.refresh,
            persist: persist
        }).then(() => {
			//removing autosaves for newly created entity
			if(itemId === 0 && $localStorage && $localStorage.entitiesSaves && $localStorage.entitiesSaves['{{alias}}']) {
				$localStorage.entitiesSaves['{{alias}}'] = $localStorage.entitiesSaves['{{alias}}'].filter(e => e.id !== 0);
			}
		});
        //}, 100000);
    };
    
    $scope.isPreview = false;
    $scope.textSync = function(text, editor, col) {
        $scope.item[col] = text;
        //console.log($scope.item[col]);
        if($scope.isPreview) {
            delay(function() {
                $scope.parse(text).then(function() {
                    editor.codemirror.refresh();
                    });
            }, 1000);
        }
    }
    
    $scope.togglePreview = function(isPreview, editor, col) {
        if (isPreview !== $scope.isPreview) {
            $scope.isPreview = isPreview;
            $scope.parse($scope.item[col]).then(function () {
                //console.log(1);
                editor.codemirror.refresh();
            });
        }
    }
    
    $scope.search = function(text) {
        return plDataService.getMdeSearchHints(text).then(function (results) {
            return results;
        });
    }
    
    $('#entityForm').submit(function(e) {
        $scope.prePost(e);

        var obj = {};
        
        if ($scope.item && $scope.item.id > 0) {
            obj.updated_at = $scope.item.updated_at;
        }
        
        {% for col, value in columns if ((value.readonly is null or value.on_form == true) and (not value.access or can(alias, value.access))) %}
            {% if value.type == 'bool' %}
                obj['{{ col }}'] = $('#entityForm').find('#{{ col }}').is(':checked') ? 1 : 0;
            {% elseif value.nullable %}
                var {{ col }}Val = $('#entityForm').find('#{{ col }}').val();
                obj['{{ col }}'] = ({{ col }}Val) ? {{ col }}Val : null;
            {% else %}
                obj['{{ col }}'] = $('#entityForm').find('#{{ col }}').val();
            {% endif %}
        {% endfor %}

        {% for col in hidden|keys %}
            obj['{{ col }}'] = $('#entityForm').find('#{{ col }}').val();
        {% endfor %}
        
        var persist = $('#entityForm').find('#persist').is(':checked');
        
        if ($scope.croppie) {
            $scope.croppieGetThumb(function(thumb) {
                if ($scope.originalPicture != -1) {
                    obj['picture'] = $scope.originalPicture;
                }
                
                obj['thumb'] = thumb;
                
                var croppieInfo = $('#croppie-upload').croppie('get');
                obj['points'] = croppieInfo.points;

                $scope.submitData(obj, persist);
            });
        }
        else {
            $scope.submitData(obj, persist);
        }
    });
    
    $scope.tableInitComplete = function(settings, json) {
        {% if action_onload %}
            {% if action_onload.action == 'create' and can_create %}
                $scope.createItem();
            {% elseif action_onload.action == 'edit' and action_onload.id > 0 and can_edit %}
                var rowData = $scope.table.row('#{{ action_onload.id }}').data();
                if (rowData) {
                    $scope.editItem(rowData);
                }
            {% endif %}
        {% endif %}
    };

    Promise.all(promises).then(function(results) {
        $scope.initTable();
    });
    
    {{ entity_more_angular }}
{% endset %}

{% block js_appendix %}
    {# croppie #}
    <script src="{{ folders.global }}croppie/croppie.js"></script>
{% endblock %}
